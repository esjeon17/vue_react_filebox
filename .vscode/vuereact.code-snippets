{
	// Place your VueReact workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"React Class Component": {
		"prefix": "rcc",
		"body": [
			"//import React, { Component } from 'react';",
			"//import ReactDOM from 'react-dom'",
			"",
			"console.log(React);",
			"console.log(React.Component);",
			"console.log(ReactDOM);",
			"",
			"class ${1:${TM_FILENAME_BASE}} extends React.Component {",
			"",
			"    static defaultProps = {  /*  props의 디폴트 값 설정 */  } ",
			"    static propsTypes = {  /* props의 프로퍼티 타입 설정 */ } ",
			"    state = {",
			"",
			"    }",
			"    constructor(props) {",
			"        super(props);",
			"        // this 바인딩",
			"",
			"    }",
			"    componentDidMount() {",
			"    // 마운트 완료 후에 : 한번만  ",
			"    }",
			"    componentDidUpdate(prevProps, prevState) {",
			"     // 업데이트 완료 후에 : 여러번, state가 변경될 때마다",
			"    }",
			"    componentWillUnmount() {",
			"    // 언마운트 완료 후에 : 페이지 unload 될때 한번.",
			"    }",
			"    handler = (e) => { ",
			"	// 이벤트 핸들러를 화살표 함수로 만들면 constructor(생성자)에서 this를 bind() 생략해도 된다. ",
			"	} ",
			"    render() {",
			"        return (",
			"            <div>",
			"                ${2:}",
			"            </div>",
			"        );",
			"    }",
			"}",
			"",
			"//export default ${1:${TM_FILENAME_BASE}};"
		],
		"description": "React Class Component"
	},
	"React Functional Component": {
		"prefix": "rfc",
		"body": [
			"//import React, { useState, useEffect, useRef, useReducer, useContext, useMemo, useCallback, useImperativeHandle, useLayoutEffect, useDebugValue } from 'react';",
			"//import ReactDOM from 'react-dom'",
			"",
			"console.log(React);",
			"console.log(React.useState); // 상태값",
			"console.log(React.useEffect); // 생명주기",
			"console.log(React.useRef); // 속성값",
			"console.log(ReactDOM);",
			"",
			"const ${1:${TM_FILENAME_BASE}} = (props) => {",
			"    //const [user, setUser] = React.useState({ userId: 0, name: '', age: 0, });",
			"    return (",
			"        <div>",
			"            ${2:}",
			"        </div>",
			"    );",
			"};",
			"",
			"//export default ${1:${TM_FILENAME_BASE}};"
		],
		"description": "React Functional Component"
	}
}